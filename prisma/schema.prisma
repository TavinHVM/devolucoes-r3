generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_profiles {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  password   String
  role       String
  user_level String?  // Mantido para compatibilidade, mas será opcional
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  permission_preset_id Int? // Referência opcional a um preset de permissões
  permission_preset    permission_presets? @relation(fields: [permission_preset_id], references: [id], onDelete: SetNull)
  
  // Relação com permissões
  permissions user_permissions[]
}

model permissions {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  label       String
  description String?
  category    String   // 'solicitacoes', 'usuarios', 'sistema'
  created_at  DateTime @default(now())
  
  // Relação com usuários
  users user_permissions[]
  // Relação com presets
  presets permission_preset_permissions[]
}

model user_permissions {
  id            Int         @id @default(autoincrement())
  user_id       Int
  permission_id Int
  created_at    DateTime    @default(now())
  
  // Relações
  user       user_profiles @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission permissions   @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, permission_id])
}

model solicitacoes {
  id                   Int       @id @default(autoincrement())
  nome                 String
  filial               String
  numero_nf            String
  carga                String
  nome_cobranca        String?
  cod_cobranca         String
  rca                  Int
  cgent                String?
  motivo_devolucao     String
  motivo_recusa        String?
  tipo_devolucao       String
  arquivo_nf           Bytes?
  arquivo_recibo       Bytes?
  arquivo_nf_devolucao Bytes?
  cod_cliente          Int
  status               String
  vale                 String?
  pendente_at          DateTime?
  aprovada_at          DateTime?
  recusada_at          DateTime?
  desdobrada_at        DateTime?
  reenviada_at         DateTime?
  abatida_at           DateTime?
  finalizada_at        DateTime?
  pendente_by          String?
  aprovada_by          String?
  recusada_by          String?
  desdobrada_by        String?
  abatida_by           String?
  finalizada_by        String?
  created_at           DateTime  @default(now())
  updated_at           DateTime? @default(now())
}

model products {
  id         Int      @id @default(autoincrement())
  numeronf   String
  cod_prod   Int
  descricao  String
  quantidade Int
  punit      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
}

model returned_products {
  id         Int      @id @default(autoincrement())
  numeronf   String
  cod_prod   Int
  descricao  String
  quantidade Int
  punit      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
}

// Presets (grupos) de permissões reutilizáveis (Níveis de Acesso)
model permission_presets {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  permissions permission_preset_permissions[]
  users       user_profiles[]
}

// Relação many-to-many entre presets e permissions (com metadata futura se precisar)
model permission_preset_permissions {
  id            Int         @id @default(autoincrement())
  preset_id     Int
  permission_id Int
  created_at    DateTime    @default(now())

  preset     permission_presets @relation(fields: [preset_id], references: [id], onDelete: Cascade)
  permission permissions         @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([preset_id, permission_id])
}
